// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import { InputBoxOptions } from 'vscode';

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('Congratulations, your extension "groupreplacer" is now active!');

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json
	let disposable = vscode.commands.registerCommand('groupreplacer.replaceList', () => {


		const whatReplace: string[] = [
			'42869810307649914001245201245985783104',
			'59678951781021326858984116522296775717',
			'25269051985770232476148093614860365222',
			'51856880083212451497452654002272923812',
			'73407386673533385825808674395177082555',
			'28817245156800371255651316727400889855',
			'74794841726051084969556217050081264871',
			'34740825896530348817733212313789507761',
			'11704057406828357062760609526173522354',
			'68367481570490784131000635779271872453',
			'8107665865602051771578270113442548002',
			'27930475316381974094950553707154287717',
			'37966523875823374406605946164835582224',
			'25498172352239026864920645413676111079',
			'28937180232074905965923376668701359598',
			'27472159852965487146768827830363877776',
			'79057493719302947903877625794569460073',
			'5457404331079984540239250459519985315',
			'72897350200586846192401480723798995690',
			'43814509698608762105014748016414334555',
			'20274010801078805204709309157637065174',
			'62736040761655442305423961238014538342',
			'35434294556912187003814883601434463882',
			'67956634875031951912766411820367611018',
			'58486194260874004893026636126242739062',
			'75446439077918728816778474567460429895',
			'65284381684151799565042669429612451934'
		];

		const onWhatReplace: string[] = [
			'27027340073200398256369005867870350997',
			'23737903924309416008565136051146844980',
			'75927016773589621438733012508575436209',
			'60933125403582886296657869081016341040',
			'2156549877787966299433887130625076413',
			'31884005088261792027934187271134628797',
			'26604289800280175923274300662373828233',
			'78243213017496934800491029561711667654',
			'72551930182176342002287722733691533857',
			'663887396080321955418728631934655365',
			'25837196878643162134144440307657203169',
			'5686916920196178970119331297332187474',
			'16385118964409936596652875489596611194',
			'38591570077689458287762634977984042095',
			'72184561989976387570667224235913343148',
			'55855137330831130330135780063834119383',
			'26697033003501643185853949656625992224',
			'27114287180537323286492563860989148098',
			'54925181179448442983475395743117229811',
			'15009334453773245970722070923254444576',
			'17646145112615641919005381599794264644',
			'81333801907232972786863220013143090913',
			'73207824368961713969761910259210646438',
			'5880176439321049480369752635621617848',
			'23256772799579661449760317846342448504',
			'52934769846701706286500995329192244595',
			'47813379624709219650498301701075948328'


		];

		const edit = new vscode.WorkspaceEdit();
		vscode.window.createInputBox()
		const { activeTextEditor } = vscode.window;
		if (activeTextEditor) {
			const { document } = activeTextEditor;
			let entireDocRange = document.validateRange(new vscode.Range(0, 0, document.lineCount, 0));
			let docText = document.getText();

			let newDocText = docText;
			whatReplace.forEach((element, index) => {
				const searchPatt: RegExp = new RegExp(element, "g");
				newDocText = newDocText.replace(searchPatt, onWhatReplace[index]);
			});


			edit.replace(document.uri, entireDocRange, newDocText);
		}

		return vscode.workspace.applyEdit(edit);


	});


	context.subscriptions.push(disposable);
}

// this method is called when your extension is deactivated
export function deactivate() { }
